//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Scripts/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player_KBM"",
            ""id"": ""7274f216-4b73-41bc-a805-a67d970db69e"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""aeb2fba3-b63e-455e-a91c-3bd5b588a533"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""163a9d74-2493-4e18-ab63-632147a49f2c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""PassThrough"",
                    ""id"": ""83874468-35cd-446b-9d99-92bc4c8b00d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""834dea3d-c632-4052-bac1-a838c2d9029f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""8b90b694-ecc6-48cd-9b9b-bad54750243d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""99a89b6d-1406-49d9-ba92-0c1198e7d1d6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6add75a9-7180-45c6-8ff7-5ba4637a1166"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bd035c37-6f61-4146-b1b7-588c8212e87c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0b1134a0-9ee3-4f51-a1a9-680836831849"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ee3cd475-6323-45d8-bb7a-9bd06c9cb91b"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5406ce36-966e-4d79-b02d-114bb9c40a52"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fcec1dfb-0842-4da5-bc70-2a17e3d843ba"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player_Gamepad"",
            ""id"": ""cef4a7f8-a440-4781-a6bc-c389c86020ce"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5bab60d1-014e-465f-8454-8a0743b157ce"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""77a29998-f505-4f7a-aa61-f51f73c51326"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f890515a-6d1d-44f5-bd04-30b7eacf039f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""838f2f60-39cd-4fbb-9599-add2f7271917"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7e1f6fbe-4d5b-457a-8c93-56133428e4d7"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ce42a29-660e-4e3c-abe5-c96b525f5322"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""470b4903-0bed-47a5-b2aa-f0417cafe523"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c5d33f5-ad04-4618-b200-675648ec8f14"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player_KBM
        m_Player_KBM = asset.FindActionMap("Player_KBM", throwIfNotFound: true);
        m_Player_KBM_Move = m_Player_KBM.FindAction("Move", throwIfNotFound: true);
        m_Player_KBM_Look = m_Player_KBM.FindAction("Look", throwIfNotFound: true);
        m_Player_KBM_Shoot = m_Player_KBM.FindAction("Shoot", throwIfNotFound: true);
        m_Player_KBM_SwitchWeapon = m_Player_KBM.FindAction("SwitchWeapon", throwIfNotFound: true);
        // Player_Gamepad
        m_Player_Gamepad = asset.FindActionMap("Player_Gamepad", throwIfNotFound: true);
        m_Player_Gamepad_Move = m_Player_Gamepad.FindAction("Move", throwIfNotFound: true);
        m_Player_Gamepad_Look = m_Player_Gamepad.FindAction("Look", throwIfNotFound: true);
        m_Player_Gamepad_Shoot = m_Player_Gamepad.FindAction("Shoot", throwIfNotFound: true);
        m_Player_Gamepad_SwitchWeapon = m_Player_Gamepad.FindAction("SwitchWeapon", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_KBM
    private readonly InputActionMap m_Player_KBM;
    private IPlayer_KBMActions m_Player_KBMActionsCallbackInterface;
    private readonly InputAction m_Player_KBM_Move;
    private readonly InputAction m_Player_KBM_Look;
    private readonly InputAction m_Player_KBM_Shoot;
    private readonly InputAction m_Player_KBM_SwitchWeapon;
    public struct Player_KBMActions
    {
        private @PlayerControls m_Wrapper;
        public Player_KBMActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_KBM_Move;
        public InputAction @Look => m_Wrapper.m_Player_KBM_Look;
        public InputAction @Shoot => m_Wrapper.m_Player_KBM_Shoot;
        public InputAction @SwitchWeapon => m_Wrapper.m_Player_KBM_SwitchWeapon;
        public InputActionMap Get() { return m_Wrapper.m_Player_KBM; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_KBMActions set) { return set.Get(); }
        public void SetCallbacks(IPlayer_KBMActions instance)
        {
            if (m_Wrapper.m_Player_KBMActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_Player_KBMActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_Player_KBMActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_Player_KBMActionsCallbackInterface.OnMove;
                @Look.started -= m_Wrapper.m_Player_KBMActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_Player_KBMActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_Player_KBMActionsCallbackInterface.OnLook;
                @Shoot.started -= m_Wrapper.m_Player_KBMActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_Player_KBMActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_Player_KBMActionsCallbackInterface.OnShoot;
                @SwitchWeapon.started -= m_Wrapper.m_Player_KBMActionsCallbackInterface.OnSwitchWeapon;
                @SwitchWeapon.performed -= m_Wrapper.m_Player_KBMActionsCallbackInterface.OnSwitchWeapon;
                @SwitchWeapon.canceled -= m_Wrapper.m_Player_KBMActionsCallbackInterface.OnSwitchWeapon;
            }
            m_Wrapper.m_Player_KBMActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @SwitchWeapon.started += instance.OnSwitchWeapon;
                @SwitchWeapon.performed += instance.OnSwitchWeapon;
                @SwitchWeapon.canceled += instance.OnSwitchWeapon;
            }
        }
    }
    public Player_KBMActions @Player_KBM => new Player_KBMActions(this);

    // Player_Gamepad
    private readonly InputActionMap m_Player_Gamepad;
    private IPlayer_GamepadActions m_Player_GamepadActionsCallbackInterface;
    private readonly InputAction m_Player_Gamepad_Move;
    private readonly InputAction m_Player_Gamepad_Look;
    private readonly InputAction m_Player_Gamepad_Shoot;
    private readonly InputAction m_Player_Gamepad_SwitchWeapon;
    public struct Player_GamepadActions
    {
        private @PlayerControls m_Wrapper;
        public Player_GamepadActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Gamepad_Move;
        public InputAction @Look => m_Wrapper.m_Player_Gamepad_Look;
        public InputAction @Shoot => m_Wrapper.m_Player_Gamepad_Shoot;
        public InputAction @SwitchWeapon => m_Wrapper.m_Player_Gamepad_SwitchWeapon;
        public InputActionMap Get() { return m_Wrapper.m_Player_Gamepad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_GamepadActions set) { return set.Get(); }
        public void SetCallbacks(IPlayer_GamepadActions instance)
        {
            if (m_Wrapper.m_Player_GamepadActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_Player_GamepadActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_Player_GamepadActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_Player_GamepadActionsCallbackInterface.OnMove;
                @Look.started -= m_Wrapper.m_Player_GamepadActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_Player_GamepadActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_Player_GamepadActionsCallbackInterface.OnLook;
                @Shoot.started -= m_Wrapper.m_Player_GamepadActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_Player_GamepadActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_Player_GamepadActionsCallbackInterface.OnShoot;
                @SwitchWeapon.started -= m_Wrapper.m_Player_GamepadActionsCallbackInterface.OnSwitchWeapon;
                @SwitchWeapon.performed -= m_Wrapper.m_Player_GamepadActionsCallbackInterface.OnSwitchWeapon;
                @SwitchWeapon.canceled -= m_Wrapper.m_Player_GamepadActionsCallbackInterface.OnSwitchWeapon;
            }
            m_Wrapper.m_Player_GamepadActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @SwitchWeapon.started += instance.OnSwitchWeapon;
                @SwitchWeapon.performed += instance.OnSwitchWeapon;
                @SwitchWeapon.canceled += instance.OnSwitchWeapon;
            }
        }
    }
    public Player_GamepadActions @Player_Gamepad => new Player_GamepadActions(this);
    public interface IPlayer_KBMActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnSwitchWeapon(InputAction.CallbackContext context);
    }
    public interface IPlayer_GamepadActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnSwitchWeapon(InputAction.CallbackContext context);
    }
}
